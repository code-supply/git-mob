#!/usr/bin/env bash

set -e

assert_equal () {
  local red='\033[0;31m'
  local green='\033[0;32m'
  local no_color='\033[0m'
  local expected=$1
  local actual=$2
  local message=${@:3}

  if [[ "$expected" = "$actual" ]]
  then
    printf "$green✓$no_color $message\n"
  else
    printf "$red✗$no_color $message\n"
    printf "$red\n"
    echo "∵ actual:"
    echo "$actual"
    echo "not equal to:"
    echo "$expected"
    printf "$no_color"
    exit 1
  fi
}

echo '{"coauthors":' \
  > "$GIT_MOB_COAUTHORS"
echo '{"ab":{"name":"Andrew Bruce","email":"me@andrewbruce.net"}' \
  >> "$GIT_MOB_COAUTHORS"
echo ',"fb":{"name":"Fred Brookes","email":"fred@example.com"}' \
  >> "$GIT_MOB_COAUTHORS"
echo '}}' \
  >> "$GIT_MOB_COAUTHORS"

git init --quiet

message_path="$(mktemp)"

git-solo
git-mob-prepare-commit-msg "$message_path" "type of commit" "SOMESHA1"
actual_output="$(stat --printf="%s" "$message_path")"

assert_equal \
  0 \
  "$actual_output" \
  prepare-commit-msg without coauthors produces an empty message


echo "# 345678" > "$message_path"
git-mob-prepare-commit-msg "$message_path" "type of commit" "SOMESHA1"

assert_equal \
  "# 345678" \
  "$(cat "$message_path")" \
  prepare-commit-msg without coauthors has no leading whitespace


git-mob ab fb > /dev/null

existing_message="Hello, World!"
echo "$existing_message" > "$message_path"

git-mob-prepare-commit-msg "$message_path" "type of commit" "SOMESHA1"
actual_output="$(cat "$message_path")"

assert_equal \
  "Hello, World!

Co-authored-by: Andrew Bruce <me@andrewbruce.net>
Co-authored-by: Fred Brookes <fred@example.com>" \
  "$actual_output" \
  prepare-commit-msg hook adds coauthors to a message without comments


existing_message="Hello, World!

# some comments
# go here
"
echo "$existing_message" > "$message_path"

git-mob-prepare-commit-msg "$message_path" "type of commit" "SOMESHA1"
actual_output="$(cat "$message_path")"

assert_equal \
  "Hello, World!

Co-authored-by: Andrew Bruce <me@andrewbruce.net>
Co-authored-by: Fred Brookes <fred@example.com>

# some comments
# go here" \
  "$actual_output" \
  prepare-commit-msg hook adds coauthors to an existing message


existing_message="# some comments
# go here
"
echo "$existing_message" > "$message_path"

git-mob-prepare-commit-msg "$message_path" "type of commit" "SOMESHA1"
actual_output="$(cat "$message_path")"

assert_equal \
  "
Co-authored-by: Andrew Bruce <me@andrewbruce.net>
Co-authored-by: Fred Brookes <fred@example.com>

# some comments
# go here" \
  "$actual_output" \
  prepare-commit-msg hook adds newline + coauthors to a comment-only message


existing_message="I'm a commit that's bound to be amended

Co-authored-by: Original Author <og@authors.biz>

# some comments
# go here"
echo "$existing_message" > "$message_path"

git-mob-prepare-commit-msg "$message_path" "type of commit" "SOMESHA1"
actual_output="$(cat "$message_path")"

assert_equal \
  "$existing_message" \
  "$actual_output" \
  prepare-commit-msg hook preserves existing coauthors


existing_message="I'm a commit without trailers"
echo "$existing_message" > "$message_path"

(
export GIT_AUTHOR_EMAIL=jim@bob.com
export GIT_AUTHOR_NAME=James
export GIT_COMMITTER_EMAIL=jim@bob.com
export GIT_COMMITTER_NAME=James
git commit --quiet --allow-empty -m first
git commit --quiet --allow-empty -m second
git checkout --quiet HEAD^
)

git-mob-prepare-commit-msg "$message_path" "type of commit" "SOMESHA1"
actual_output="$(cat "$message_path")"

assert_equal \
  "$existing_message" \
  "$actual_output" \
  prepare-commit-msg hook does not change commits during a rebase
